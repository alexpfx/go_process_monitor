// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: proto/ps_monitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Match bool   `protobuf:"varint,3,opt,name=match,proto3" json:"match,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ps_monitor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ps_monitor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_ps_monitor_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Event) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Event) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

type ProcessMonitorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdPath       string `protobuf:"bytes,1,opt,name=cmdPath,proto3" json:"cmdPath,omitempty"`
	Args          string `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	Pattern       string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	ReceiveOutput bool   `protobuf:"varint,4,opt,name=receiveOutput,proto3" json:"receiveOutput,omitempty"`
}

func (x *ProcessMonitorRequest) Reset() {
	*x = ProcessMonitorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ps_monitor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMonitorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMonitorRequest) ProtoMessage() {}

func (x *ProcessMonitorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ps_monitor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMonitorRequest.ProtoReflect.Descriptor instead.
func (*ProcessMonitorRequest) Descriptor() ([]byte, []int) {
	return file_proto_ps_monitor_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessMonitorRequest) GetCmdPath() string {
	if x != nil {
		return x.CmdPath
	}
	return ""
}

func (x *ProcessMonitorRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *ProcessMonitorRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ProcessMonitorRequest) GetReceiveOutput() bool {
	if x != nil {
		return x.ReceiveOutput
	}
	return false
}

var File_proto_ps_monitor_proto protoreflect.FileDescriptor

var file_proto_ps_monitor_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x22, 0x45, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x85, 0x01, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x32, 0x58, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x73, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x06, 0x5a,
	0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ps_monitor_proto_rawDescOnce sync.Once
	file_proto_ps_monitor_proto_rawDescData = file_proto_ps_monitor_proto_rawDesc
)

func file_proto_ps_monitor_proto_rawDescGZIP() []byte {
	file_proto_ps_monitor_proto_rawDescOnce.Do(func() {
		file_proto_ps_monitor_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ps_monitor_proto_rawDescData)
	})
	return file_proto_ps_monitor_proto_rawDescData
}

var file_proto_ps_monitor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_ps_monitor_proto_goTypes = []interface{}{
	(*Event)(nil),                 // 0: ps_monitor.Event
	(*ProcessMonitorRequest)(nil), // 1: ps_monitor.ProcessMonitorRequest
}
var file_proto_ps_monitor_proto_depIdxs = []int32{
	1, // 0: ps_monitor.ProcessMonitor.StartProcess:input_type -> ps_monitor.ProcessMonitorRequest
	0, // 1: ps_monitor.ProcessMonitor.StartProcess:output_type -> ps_monitor.Event
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_ps_monitor_proto_init() }
func file_proto_ps_monitor_proto_init() {
	if File_proto_ps_monitor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ps_monitor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ps_monitor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMonitorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ps_monitor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ps_monitor_proto_goTypes,
		DependencyIndexes: file_proto_ps_monitor_proto_depIdxs,
		MessageInfos:      file_proto_ps_monitor_proto_msgTypes,
	}.Build()
	File_proto_ps_monitor_proto = out.File
	file_proto_ps_monitor_proto_rawDesc = nil
	file_proto_ps_monitor_proto_goTypes = nil
	file_proto_ps_monitor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProcessMonitorClient is the client API for ProcessMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProcessMonitorClient interface {
	StartProcess(ctx context.Context, in *ProcessMonitorRequest, opts ...grpc.CallOption) (ProcessMonitor_StartProcessClient, error)
}

type processMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessMonitorClient(cc grpc.ClientConnInterface) ProcessMonitorClient {
	return &processMonitorClient{cc}
}

func (c *processMonitorClient) StartProcess(ctx context.Context, in *ProcessMonitorRequest, opts ...grpc.CallOption) (ProcessMonitor_StartProcessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProcessMonitor_serviceDesc.Streams[0], "/ps_monitor.ProcessMonitor/StartProcess", opts...)
	if err != nil {
		return nil, err
	}
	x := &processMonitorStartProcessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessMonitor_StartProcessClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type processMonitorStartProcessClient struct {
	grpc.ClientStream
}

func (x *processMonitorStartProcessClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessMonitorServer is the server API for ProcessMonitor service.
type ProcessMonitorServer interface {
	StartProcess(*ProcessMonitorRequest, ProcessMonitor_StartProcessServer) error
}

// UnimplementedProcessMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedProcessMonitorServer struct {
}

func (*UnimplementedProcessMonitorServer) StartProcess(*ProcessMonitorRequest, ProcessMonitor_StartProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method StartProcess not implemented")
}

func RegisterProcessMonitorServer(s *grpc.Server, srv ProcessMonitorServer) {
	s.RegisterService(&_ProcessMonitor_serviceDesc, srv)
}

func _ProcessMonitor_StartProcess_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProcessMonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessMonitorServer).StartProcess(m, &processMonitorStartProcessServer{stream})
}

type ProcessMonitor_StartProcessServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type processMonitorStartProcessServer struct {
	grpc.ServerStream
}

func (x *processMonitorStartProcessServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _ProcessMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ps_monitor.ProcessMonitor",
	HandlerType: (*ProcessMonitorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartProcess",
			Handler:       _ProcessMonitor_StartProcess_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ps_monitor.proto",
}
